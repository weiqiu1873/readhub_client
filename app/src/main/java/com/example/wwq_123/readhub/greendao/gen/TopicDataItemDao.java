package com.example.wwq_123.readhub.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.wwq_123.readhub.model.bean.converter.CommonDataItemStringConverter;
import java.util.List;

import com.example.wwq_123.readhub.model.bean.TopicDataItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TOPIC_DATA_ITEM".
*/
public class TopicDataItemDao extends AbstractDao<TopicDataItem, String> {

    public static final String TABLENAME = "TOPIC_DATA_ITEM";

    /**
     * Properties of entity TopicDataItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Url = new Property(0, String.class, "url", true, "URL");
        public final static Property CreatedAt = new Property(1, String.class, "createdAt", false, "CREATED_AT");
        public final static Property Order = new Property(2, int.class, "order", false, "ORDER");
        public final static Property PublishDate = new Property(3, String.class, "publishDate", false, "PUBLISH_DATE");
        public final static Property Summary = new Property(4, String.class, "summary", false, "SUMMARY");
        public final static Property Title = new Property(5, String.class, "title", false, "TITLE");
        public final static Property UpdatedAt = new Property(6, String.class, "updatedAt", false, "UPDATED_AT");
        public final static Property Timeline = new Property(7, String.class, "timeline", false, "TIMELINE");
        public final static Property NewsArray = new Property(8, String.class, "newsArray", false, "NEWS_ARRAY");
    }

    private final CommonDataItemStringConverter newsArrayConverter = new CommonDataItemStringConverter();

    public TopicDataItemDao(DaoConfig config) {
        super(config);
    }
    
    public TopicDataItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TOPIC_DATA_ITEM\" (" + //
                "\"URL\" TEXT PRIMARY KEY NOT NULL ," + // 0: url
                "\"CREATED_AT\" TEXT," + // 1: createdAt
                "\"ORDER\" INTEGER NOT NULL ," + // 2: order
                "\"PUBLISH_DATE\" TEXT," + // 3: publishDate
                "\"SUMMARY\" TEXT," + // 4: summary
                "\"TITLE\" TEXT," + // 5: title
                "\"UPDATED_AT\" TEXT," + // 6: updatedAt
                "\"TIMELINE\" TEXT," + // 7: timeline
                "\"NEWS_ARRAY\" TEXT);"); // 8: newsArray
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TOPIC_DATA_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TopicDataItem entity) {
        stmt.clearBindings();
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(1, url);
        }
 
        String createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindString(2, createdAt);
        }
        stmt.bindLong(3, entity.getOrder());
 
        String publishDate = entity.getPublishDate();
        if (publishDate != null) {
            stmt.bindString(4, publishDate);
        }
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(5, summary);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
 
        String updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindString(7, updatedAt);
        }
 
        String timeline = entity.getTimeline();
        if (timeline != null) {
            stmt.bindString(8, timeline);
        }
 
        List newsArray = entity.getNewsArray();
        if (newsArray != null) {
            stmt.bindString(9, newsArrayConverter.convertToDatabaseValue(newsArray));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TopicDataItem entity) {
        stmt.clearBindings();
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(1, url);
        }
 
        String createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindString(2, createdAt);
        }
        stmt.bindLong(3, entity.getOrder());
 
        String publishDate = entity.getPublishDate();
        if (publishDate != null) {
            stmt.bindString(4, publishDate);
        }
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(5, summary);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
 
        String updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindString(7, updatedAt);
        }
 
        String timeline = entity.getTimeline();
        if (timeline != null) {
            stmt.bindString(8, timeline);
        }
 
        List newsArray = entity.getNewsArray();
        if (newsArray != null) {
            stmt.bindString(9, newsArrayConverter.convertToDatabaseValue(newsArray));
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public TopicDataItem readEntity(Cursor cursor, int offset) {
        TopicDataItem entity = new TopicDataItem( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // url
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // createdAt
            cursor.getInt(offset + 2), // order
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // publishDate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // summary
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // title
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // updatedAt
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // timeline
            cursor.isNull(offset + 8) ? null : newsArrayConverter.convertToEntityProperty(cursor.getString(offset + 8)) // newsArray
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TopicDataItem entity, int offset) {
        entity.setUrl(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCreatedAt(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOrder(cursor.getInt(offset + 2));
        entity.setPublishDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSummary(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTitle(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUpdatedAt(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTimeline(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setNewsArray(cursor.isNull(offset + 8) ? null : newsArrayConverter.convertToEntityProperty(cursor.getString(offset + 8)));
     }
    
    @Override
    protected final String updateKeyAfterInsert(TopicDataItem entity, long rowId) {
        return entity.getUrl();
    }
    
    @Override
    public String getKey(TopicDataItem entity) {
        if(entity != null) {
            return entity.getUrl();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TopicDataItem entity) {
        return entity.getUrl() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
