package com.example.wwq_123.readhub.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.wwq_123.readhub.model.bean.CommonDataItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMMON_DATA_ITEM".
*/
public class CommonDataItemDao extends AbstractDao<CommonDataItem, String> {

    public static final String TABLENAME = "COMMON_DATA_ITEM";

    /**
     * Properties of entity CommonDataItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Summary = new Property(2, String.class, "summary", false, "SUMMARY");
        public final static Property SummaryAuto = new Property(3, String.class, "summaryAuto", false, "SUMMARY_AUTO");
        public final static Property Url = new Property(4, String.class, "url", false, "URL");
        public final static Property MobileUrl = new Property(5, String.class, "mobileUrl", false, "MOBILE_URL");
        public final static Property SiteName = new Property(6, String.class, "siteName", false, "SITE_NAME");
        public final static Property Language = new Property(7, String.class, "language", false, "LANGUAGE");
        public final static Property AuthorName = new Property(8, String.class, "authorName", false, "AUTHOR_NAME");
        public final static Property PublishDate = new Property(9, String.class, "publishDate", false, "PUBLISH_DATE");
        public final static Property Status = new Property(10, int.class, "status", false, "STATUS");
    }


    public CommonDataItemDao(DaoConfig config) {
        super(config);
    }
    
    public CommonDataItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMMON_DATA_ITEM\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"SUMMARY\" TEXT," + // 2: summary
                "\"SUMMARY_AUTO\" TEXT," + // 3: summaryAuto
                "\"URL\" TEXT," + // 4: url
                "\"MOBILE_URL\" TEXT," + // 5: mobileUrl
                "\"SITE_NAME\" TEXT," + // 6: siteName
                "\"LANGUAGE\" TEXT," + // 7: language
                "\"AUTHOR_NAME\" TEXT," + // 8: authorName
                "\"PUBLISH_DATE\" TEXT," + // 9: publishDate
                "\"STATUS\" INTEGER NOT NULL );"); // 10: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMMON_DATA_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CommonDataItem entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(3, summary);
        }
 
        String summaryAuto = entity.getSummaryAuto();
        if (summaryAuto != null) {
            stmt.bindString(4, summaryAuto);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(5, url);
        }
 
        String mobileUrl = entity.getMobileUrl();
        if (mobileUrl != null) {
            stmt.bindString(6, mobileUrl);
        }
 
        String siteName = entity.getSiteName();
        if (siteName != null) {
            stmt.bindString(7, siteName);
        }
 
        String language = entity.getLanguage();
        if (language != null) {
            stmt.bindString(8, language);
        }
 
        String authorName = entity.getAuthorName();
        if (authorName != null) {
            stmt.bindString(9, authorName);
        }
 
        String publishDate = entity.getPublishDate();
        if (publishDate != null) {
            stmt.bindString(10, publishDate);
        }
        stmt.bindLong(11, entity.getStatus());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CommonDataItem entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(3, summary);
        }
 
        String summaryAuto = entity.getSummaryAuto();
        if (summaryAuto != null) {
            stmt.bindString(4, summaryAuto);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(5, url);
        }
 
        String mobileUrl = entity.getMobileUrl();
        if (mobileUrl != null) {
            stmt.bindString(6, mobileUrl);
        }
 
        String siteName = entity.getSiteName();
        if (siteName != null) {
            stmt.bindString(7, siteName);
        }
 
        String language = entity.getLanguage();
        if (language != null) {
            stmt.bindString(8, language);
        }
 
        String authorName = entity.getAuthorName();
        if (authorName != null) {
            stmt.bindString(9, authorName);
        }
 
        String publishDate = entity.getPublishDate();
        if (publishDate != null) {
            stmt.bindString(10, publishDate);
        }
        stmt.bindLong(11, entity.getStatus());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public CommonDataItem readEntity(Cursor cursor, int offset) {
        CommonDataItem entity = new CommonDataItem( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // summary
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // summaryAuto
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // url
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // mobileUrl
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // siteName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // language
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // authorName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // publishDate
            cursor.getInt(offset + 10) // status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CommonDataItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSummary(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSummaryAuto(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMobileUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSiteName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLanguage(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAuthorName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPublishDate(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setStatus(cursor.getInt(offset + 10));
     }
    
    @Override
    protected final String updateKeyAfterInsert(CommonDataItem entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(CommonDataItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CommonDataItem entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
