package com.example.wwq_123.readhub.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.wwq_123.readhub.model.bean.JobArrayBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "JOB_ARRAY_BEAN".
*/
public class JobArrayBeanDao extends AbstractDao<JobArrayBean, String> {

    public static final String TABLENAME = "JOB_ARRAY_BEAN";

    /**
     * Properties of entity JobArrayBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Url = new Property(1, String.class, "url", false, "URL");
        public final static Property City = new Property(2, String.class, "city", false, "CITY");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Company = new Property(4, String.class, "company", false, "COMPANY");
        public final static Property Sponsor = new Property(5, boolean.class, "sponsor", false, "SPONSOR");
        public final static Property SiteName = new Property(6, String.class, "siteName", false, "SITE_NAME");
        public final static Property SalaryLower = new Property(7, int.class, "salaryLower", false, "SALARY_LOWER");
        public final static Property SalaryUpper = new Property(8, int.class, "salaryUpper", false, "SALARY_UPPER");
        public final static Property ExperienceLower = new Property(9, int.class, "experienceLower", false, "EXPERIENCE_LOWER");
        public final static Property ExperienceUpper = new Property(10, int.class, "experienceUpper", false, "EXPERIENCE_UPPER");
    }


    public JobArrayBeanDao(DaoConfig config) {
        super(config);
    }
    
    public JobArrayBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"JOB_ARRAY_BEAN\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"URL\" TEXT," + // 1: url
                "\"CITY\" TEXT," + // 2: city
                "\"TITLE\" TEXT," + // 3: title
                "\"COMPANY\" TEXT," + // 4: company
                "\"SPONSOR\" INTEGER NOT NULL ," + // 5: sponsor
                "\"SITE_NAME\" TEXT," + // 6: siteName
                "\"SALARY_LOWER\" INTEGER NOT NULL ," + // 7: salaryLower
                "\"SALARY_UPPER\" INTEGER NOT NULL ," + // 8: salaryUpper
                "\"EXPERIENCE_LOWER\" INTEGER NOT NULL ," + // 9: experienceLower
                "\"EXPERIENCE_UPPER\" INTEGER NOT NULL );"); // 10: experienceUpper
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"JOB_ARRAY_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, JobArrayBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(3, city);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(5, company);
        }
        stmt.bindLong(6, entity.getSponsor() ? 1L: 0L);
 
        String siteName = entity.getSiteName();
        if (siteName != null) {
            stmt.bindString(7, siteName);
        }
        stmt.bindLong(8, entity.getSalaryLower());
        stmt.bindLong(9, entity.getSalaryUpper());
        stmt.bindLong(10, entity.getExperienceLower());
        stmt.bindLong(11, entity.getExperienceUpper());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, JobArrayBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(3, city);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(5, company);
        }
        stmt.bindLong(6, entity.getSponsor() ? 1L: 0L);
 
        String siteName = entity.getSiteName();
        if (siteName != null) {
            stmt.bindString(7, siteName);
        }
        stmt.bindLong(8, entity.getSalaryLower());
        stmt.bindLong(9, entity.getSalaryUpper());
        stmt.bindLong(10, entity.getExperienceLower());
        stmt.bindLong(11, entity.getExperienceUpper());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public JobArrayBean readEntity(Cursor cursor, int offset) {
        JobArrayBean entity = new JobArrayBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // url
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // city
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // company
            cursor.getShort(offset + 5) != 0, // sponsor
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // siteName
            cursor.getInt(offset + 7), // salaryLower
            cursor.getInt(offset + 8), // salaryUpper
            cursor.getInt(offset + 9), // experienceLower
            cursor.getInt(offset + 10) // experienceUpper
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, JobArrayBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCity(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCompany(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSponsor(cursor.getShort(offset + 5) != 0);
        entity.setSiteName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSalaryLower(cursor.getInt(offset + 7));
        entity.setSalaryUpper(cursor.getInt(offset + 8));
        entity.setExperienceLower(cursor.getInt(offset + 9));
        entity.setExperienceUpper(cursor.getInt(offset + 10));
     }
    
    @Override
    protected final String updateKeyAfterInsert(JobArrayBean entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(JobArrayBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(JobArrayBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
